{"version":3,"sources":["Selected.jsx","DataHolder.jsx","StateHolder.jsx","App.js","serviceWorker.js","index.js"],"names":["Selected","props","console","log","data","map","id","alias","style","textAlign","fontSize","fontWeight","f1","f2","position","top","DataHolder","useState","brushed","StateHolder","color","width","height","dimensions","f3","title","type","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","quizData","person","Alias","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","highlights","onBrush","onBrushEnd","i","onLineHover","onLinesHover","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAEe,SAASA,EAASC,GAoB7B,OADAC,QAAQC,IAAI,MAAOF,EAAMG,MAErB,6BACA,4BACKH,EAAMG,KAAKC,KAAI,SAAAD,GACZ,OACI,wBAAIE,GAAIF,EAAKG,MAAOC,MAAO,CAACC,UAAW,SACnC,4BAAKL,EAAKG,MAAM,0BAAMC,MAAO,CAACE,SAAS,OAAQC,WAAW,WAA1C,IAAuDP,EAAKQ,GAA5D,MACfR,EAAKS,QAK1B,yBAAKL,MAAO,CAACM,SAAS,WAAYC,IAAI,IAAKN,UAAU,SACjD,wDAGI,sEAGA,wDAGA,wDAGA,iEAGA,2DAGA,wDAGA,0EAGA,oFAGA,wEAGA,2DAGA,2DAGA,+DChEG,SAASO,EAAWf,GAAO,MAGdgB,qBAHc,6BAStC,OAFAf,QAAQC,IAAI,MAAOF,EAAMiB,SAGrB,6BACI,kBAAC,IAAwBjB,GACzB,kBAACD,EAAaC,ICdX,SAASkB,IAAe,IAAD,EAEJF,mBAAS,IAFL,mBAE3BC,EAF2B,KAyI1BjB,GAzI0B,KAyIlB,CACZmB,MAAO,MACPC,MAAO,KACPC,OAAQ,IACRC,WAlFe,CAEfC,GAAI,CACAC,MAAO,KACPC,KAAM,UAEVC,GAAI,CACAF,MAAO,KACPC,KAAM,UAGVE,GAAI,CACFH,MAAO,KACPC,KAAM,UAGRG,GAAI,CACFJ,MAAO,KACPC,KAAM,UAERI,GAAI,CACAL,MAAO,KACPC,KAAM,UAGVK,GAAI,CACFN,MAAO,KACPC,KAAM,UAGRM,GAAI,CACFP,MAAO,KACPC,KAAM,UAERO,IAAK,CACDR,MAAO,MACPC,KAAM,UAGVQ,IAAK,CACHT,MAAO,MACPC,KAAM,UAGRS,IAAK,CACHV,MAAO,MACPC,KAAM,UAERU,IAAK,CACDX,MAAO,MACPC,KAAM,UAGVW,IAAK,CACHZ,MAAO,MACPC,KAAM,UAERnB,MAAO,CACHkB,MAAO,UAyBXrB,KA3GSkC,EAASjC,KAAI,SAAAkC,GACtB,IAAMhC,EAAQgC,EAAOC,MAEf5B,EAAK2B,EAAOE,GACZ5B,EAAK0B,EAAOG,GAelB,MAFc,CAAEnC,QAAOiB,GAZZe,EAAOI,GAYShB,GAXhBY,EAAOK,GAWahB,GAVpBW,EAAOM,GAUiBhB,GATxBU,EAAOO,GASqBhB,GAR5BS,EAAOQ,GAQyBhB,GAPhCQ,EAAOS,GAO6BhB,GANpCO,EAAOU,GAMiChB,IALvCM,EAAOW,IAKqChB,IAJ5CK,EAAOY,IAI0ChB,IAHjDI,EAAOa,IAG+ChB,IAFtDG,EAAOc,IAEoDhB,IAD3DE,EAAOe,IACyDzC,KAAID,SA2FhF2C,WAAY,GACZC,QAAStD,QAAQC,IACjBsD,WAlBqB,SAAArD,GACAA,EAAKA,KACAC,KAAI,SAAAqD,GAC5B,OAAOA,EAAEnD,UAgBXoD,YAxBY,SAAAvD,GACZF,QAAQC,IAAI,MAAOC,IAwBnBwD,aAAc1D,QAAQC,IACtBe,QAASA,IAOb,OACI,6BACI,kBAAC,EAAejB,I,OCpIb4D,MAxBf,WAEE,OACE,yBAAKC,UAAU,OACb,kBAAC3C,EAAD,QCEc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.687231d8.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Selected(props) {\n/*\n    const handleClick = e =>\n    {\n        console.log(e.target.id)\n        if(document.getElementById(e.target.id) !== null){\n            if(document.getElementById(e.target.id).style.textDecoration === \"line-through\"){\n            document.getElementById(e.target.id).style.textDecoration = \"none\";\n            document.getElementById(e.target.id).style.opacity = \"1\";\n\n            }else{\n                document.getElementById(e.target.id).style.textDecoration = \"line-through\";\n                document.getElementById(e.target.id).style.opacity = \".3\";  \n            }\n            \n        }\n        \n    }\n*/\n    console.log(\"AA:\", props.data)\n    return (\n        <div>\n        <ul>\n            {props.data.map(data=>{\n                return(\n                    <li id={data.alias} style={{textAlign: \"left\"}} >\n                        <h2>{data.alias}<span style={{fontSize:\"10px\", fontWeight:\"normal\"}}>({data.f1})</span></h2>\n                        {data.f2}\n                    </li>\n                )\n            })}\n    </ul>\n    <div style={{position:\"absolute\", top:\"0\", textAlign:\"left\"}}>\n        <h3>\n        How would you rate your:  \n        </h3>\n            <h5>\n            Q3 - Information Visualization skills?\n            </h5>\n            <h5>\n            Q4 - Statistical skills?\n            </h5>\n            <h5>\n            Q5 - Mathematics skills?\n            </h5>\n            <h5>\n            Q6 - Drawing and artistic skills?\n            </h5>\n            <h5>\n            Q7 - Computer usage skills?\n            </h5>\n            <h5>\n            Q8 - Programming skills?\n            </h5>\n            <h5>\n            Q9 - Computer graphics programming skills?\n            </h5>\n            <h5>\n            Q10 - Human-computer interaction programming skills?\n            </h5>\n            <h5>\n            Q11 - User experience evaluation skills?\n            </h5>\n            <h5>\n            Q12 - Communication skills?\n            </h5>\n            <h5>\n            Q13 - Collaboration skills?\n            </h5>\n            <h5>\n            Q14 - Code repository skills?\n            </h5>\n  \n    </div>\n    </div>\n    )\n}\n\n/*\n{props.selectedPeople.map(alias=>{\n                return(\n                    <li>\n                        {alias}\n                    </li>\n                )\n            })}\n\n*/\n","import React, {useState} from 'react';\n\nimport {ParallelCoordinates} from 'react-parcoords';\nimport * as d3 from 'd3';\nimport './style.css';\nimport Selected from './Selected';\n\nexport default function DataHolder(props) {\n\n    //const dimensions = props.dimensions\n    const [test, setTest] = useState()\n    \n\n\n    console.log(\"A: \", props.brushed)\n\n    return (\n        <div>\n            <ParallelCoordinates {...props} />\n            <Selected {...props}/>\n        </div>\n    )\n}\n //onBrushEnd: props.selectedPeople","import React, {useState} from 'react'\nimport quizData from './data.json';\nimport Dataholder from './DataHolder'\nimport './style.css';\n\nexport default function StateHolder() {\n\n    const [brushed, setBrushed] = useState([])\n\n    /*\n    const [data, setData] = useState(\n        quizData.map(person=>{\n            const alias = person.Alias\n            //const timestamp = person.Timestamp\n           // const f1 = person.F1\n            //const f2 = person.F2\n            const f3 = person.F3\n            const f4 = person.F4\n            const f5 = person.F5\n            const f6 = person.F6\n            const f7 = person.F7\n            const f8 = person.F8\n            const f9 = person.F9\n            const f10 = person.F10\n            const f11 = person.F11\n            const f12 = person.F12\n            const f13 = person.F13\n            const f14 = person.F14\n            const array = { alias, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14}\n            \n            return(\n              array\n              \n            );\n          })\n    );\n    */\n\n\n\n    const data = quizData.map(person=>{\n        const alias = person.Alias\n        //const timestamp = person.Timestamp\n        const f1 = person.F1\n        const f2 = person.F2\n        const f3 = person.F3\n        const f4 = person.F4\n        const f5 = person.F5\n        const f6 = person.F6\n        const f7 = person.F7\n        const f8 = person.F8\n        const f9 = person.F9\n        const f10 = person.F10\n        const f11 = person.F11\n        const f12 = person.F12\n        const f13 = person.F13\n        const f14 = person.F14\n        const array = { alias, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f2, f1}\n        \n        return(\n          array\n        );\n      })\n    \n    const dimensions = {\n        \n        f3: {\n            title: 'Q3',\n            type: 'number'\n        },\n        f4: {\n            title: 'Q4',\n            type: 'number'\n            \n        },\n        f5: {\n          title: 'Q5',\n          type: 'number'\n          \n        },\n        f6: {\n          title: 'Q6',\n          type: 'number'\n        },\n        f7: {\n            title: 'Q7',\n            type: 'number'\n            \n        },\n        f8: {\n          title: 'Q8',\n          type: 'number'\n          \n        },\n        f9: {\n          title: 'Q9',\n          type: 'number'\n        },\n        f10: {\n            title: 'Q10',\n            type: 'number'\n            \n        },\n        f11: {\n          title: 'Q11',\n          type: 'number'\n          \n        },\n        f12: {\n          title: 'Q12',\n          type: 'number'\n        },\n        f13: {\n            title: 'Q13',\n            type: 'number'\n            \n        },\n        f14: {\n          title: 'Q14',\n          type: 'number'\n        },\n        alias: {\n            title: 'Alias'\n        }\n    };\n\n\n    const hoverOn = data => {\n        console.log('Vem', data)\n        \n      }\n      \n      const selectedPeople = data => {\n        const activePeople = data.data\n        const list = activePeople.map(i =>{\n          return(i.alias)\n        })\n        //console.log(\"Brushade:\", brushed)\n        //setBrushed(list);\n    \n      }\n       \n      const props = {\n        color: 'red',\n        width: 1100,\n        height: 850,\n        dimensions,\n        data: data,\n        highlights: [],\n        onBrush: console.log,\n        onBrushEnd: selectedPeople,\n        onLineHover: hoverOn,\n        onLinesHover: console.log,\n        brushed: brushed\n    };\n      \n    \n  \n  \n\n    return (\n        <div>\n            <Dataholder {...props}/>\n            </div>\n    )\n}\n\n//<Dataholder selectedPeople={selectedPeople} dimensions={dimensions} data={data} setData={setData} brushed={brushed} setBrushed={setBrushed}/>","import React, {useState} from 'react';\nimport StateHolder from './StateHolder'\nimport './App.css';\nimport * as d3 from 'd3';\nimport './style.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <StateHolder />\n    </div>\n\n  );\n}\n\n//<Selected selectedPeople={brushed}/>\n\n/*\n<ul>\n      {brushed.map(alias=>{\n        return(\n          <li>\n            {alias}\n          </li>\n        )\n      })}\n    </ul>\n*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}